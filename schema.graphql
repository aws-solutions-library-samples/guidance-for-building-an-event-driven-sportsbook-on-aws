type Wallet @aws_cognito_user_pools @aws_iam {
  userId: ID!
  balance: Float!
}

type Event @aws_cognito_user_pools @aws_iam {
  eventId: ID!
  homeOdds: String!
  awayOdds: String!
  drawOdds: String!
  home: String!
  away: String!
  start: AWSDateTime!
  end: AWSDateTime!
  updatedAt: AWSDateTime!
}

type EventList @aws_cognito_user_pools @aws_iam {
  items: [Event]!
  nextToken: String
}

type Bet @aws_cognito_user_pools @aws_iam {
  betId: ID!
  event: Event!
  outcome: EventOutcome!
  odds: String!
  amount: Float!
  placedAt: AWSDateTime!
}

type BetList @aws_cognito_user_pools @aws_iam {
  items: [Bet]!
  nextToken: String
}

 enum EventOutcome {
    homeWin
    awayWin
    draw
 }

interface Error {
  message: String!
}

type NotFoundError implements Error @aws_cognito_user_pools @aws_iam {
  message: String!
}

type InputError implements Error @aws_cognito_user_pools @aws_iam {
  message: String!
}

type UnknownError implements Error @aws_cognito_user_pools @aws_iam {
  message: String!
}

union WalletResult = Wallet | NotFoundError | InputError | UnknownError
union EventResult = Event | NotFoundError | InputError | UnknownError
union EventsResult = EventList | NotFoundError | InputError | UnknownError
union BetsResult = BetList | NotFoundError | InputError | UnknownError

input CreateWalletInput {
  userId: ID!
}

input WithdrawOrDepositInput {
  amount: Float!
}

input UpdateEventOddsInput {
  eventId: ID!
  homeOdds: String!
  awayOdds: String!
  drawOdds: String!
}

input BetRequest {
  eventId: ID!
  outcome: EventOutcome
  odds: String!
  amount: Float!
}

input CreateBetsInput {
  bets: [BetRequest]!
}

type Query {
  getEvents(startKey: String): EventsResult @aws_cognito_user_pools @aws_iam
  getWallet: WalletResult @aws_cognito_user_pools
  getBets(startKey: String): BetsResult @aws_cognito_user_pools
  getWalletByUserId(userId: ID!): WalletResult @aws_iam
  getEvent(eventId: ID!, timestamp: Float): EventResult @aws_iam @aws_cognito_user_pools
}

type Mutation {
  createWallet(input: CreateWalletInput): WalletResult @aws_iam
  depositFunds(input: WithdrawOrDepositInput): WalletResult @aws_cognito_user_pools
  updateEventOdds(input: UpdateEventOddsInput): EventResult @aws_iam
  withdrawFunds(input: WithdrawOrDepositInput): WalletResult @aws_cognito_user_pools
  createBets(input: CreateBetsInput): BetsResult @aws_cognito_user_pools
}

type Subscription {
  updatedEventOdds: EventResult @aws_subscribe(mutations: ["updateEventOdds"])
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
