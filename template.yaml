AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Sportsbook Event Driven Example Application

Globals:

  Function:
    Runtime: python3.9
    Tracing: Active
    Layers:
      - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV2:32

Parameters:

  EventBusName:
    Type: String
    Default: "SportsbookEvents"
    Description: Optional name for the eventbus used in this application

  AccessLogsBucket:
    Type: String
    Default: ""
    Description: Optional bucket for access logs. Leave blank to disable access logging

  CognitoAdvancedSecurity:
    Description: The type of Cognito advanced security to enable. Disabled by default.
    Type: String
    Default: "OFF"
    AllowedValues:
      - "OFF"
      - "AUDIT"
      - "ENFORCED"

Conditions:
  WithAccessLogs: !Not [!Equals [!Ref AccessLogsBucket, ""]]

Resources:

  EventBus:
    Type: AWS::Events::EventBus
    Properties:
        Name: !Ref EventBusName

  WebUIBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration: !If
        - WithAccessLogs
        - DestinationBucketName: !Ref AccessLogsBucket
          LogFilePrefix: !Ref AWS::StackName
        - !Ref AWS::NoValue

  WebUIBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebUIBucket
      PolicyDocument:
        Statement:
          - Sid: HttpsOnly
            Action: "*"
            Effect: Deny
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${WebUIBucket}
              - !Sub arn:${AWS::Partition}:s3:::${WebUIBucket}/*
            Principal: "*"
            Condition:
              Bool:
                "aws:SecureTransport": "false"
          - Sid: CloudFrontOriginOnly
            Action: s3:GetObject
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:s3:::${WebUIBucket}/*
            Principal:
              Service: "cloudfront.amazonaws.com"
            Condition:
              ArnEquals:
                aws:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${AWS::StackName}-S3AccessControl'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt WebUIBucket.RegionalDomainName
            Id: S3Origin
            OriginAccessControlId: !Ref CloudFrontOriginAccessControl
            S3OriginConfig: {}
        Enabled: true
        HttpVersion: http2
        Comment: The UI distribution
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_All
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        Logging: !If
          - WithAccessLogs
          - Bucket: !Sub ${AccessLogsBucket}.s3.${AWS::URLSuffix}
            IncludeCookies: false
            Prefix: !Sub ${AWS::StackName}/
          - !Ref AWS::NoValue

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      EmailVerificationMessage: "Your Sportsbook confirmation code is {####}"
      EmailVerificationSubject: "Your confirmation code for Sportsbook"
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - 'email'
      UserPoolAddOns:
        AdvancedSecurityMode: !Ref CognitoAdvancedSecurity
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

  PostConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: postConfirmation.lambda_handler
      CodeUri: infrastructure/lambda/auth/
      Description: Event receiver for auth events
      Timeout: 10
      MemorySize: 256
      Events:
        CognitoPostConfirmation:
          Type: Cognito
          Properties:
            UserPool: !Ref UserPool
            Trigger: PostConfirmation
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBus
      Environment:
        Variables:
          EVENT_BUS: !Ref EventBus

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      SupportedIdentityProviders:
        - COGNITO

  AppSyncLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: Layer containing appsync graphql utilities
      ContentUri: infrastructure/lambda/gql/
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

  AppSyncLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-AWSAppSyncPushToCloudWatchLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*'

  AppSyncApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub ${AWS::StackName}-AppSync-api
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      AdditionalAuthenticationProviders:
        - AuthenticationType: AWS_IAM
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppSyncLoggingRole.Arn
        FieldLogLevel: ALL
      UserPoolConfig:
        UserPoolId: !Ref UserPool
        AwsRegion: !Sub ${AWS::Region}
        DefaultAction: ALLOW
      XrayEnabled: true

  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DefinitionS3Location: "./schema.graphql"

  # Services
  WalletServiceStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: infrastructure/cfn/wallet-service.yaml
      Parameters:
        AppSyncApiId: !GetAtt AppSyncApi.ApiId
        AppSyncApiUrl: !GetAtt AppSyncApi.GraphQLUrl
        EventBus: !Ref EventBus
        AppSyncLambdaLayer: !Ref AppSyncLambdaLayer
        UserPool: !Ref UserPool

  ThirdPartyServiceStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: infrastructure/cfn/thirdparty-service.yaml
      Parameters:
        EventBus: !Ref EventBus

  TradingServiceStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: infrastructure/cfn/trading-service.yaml
      Parameters:
        EventBus: !Ref EventBus

  LiveMarketServiceStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: infrastructure/cfn/livemarket-service.yaml
      Parameters:
        AppSyncApiId: !GetAtt AppSyncApi.ApiId
        AppSyncApiUrl: !GetAtt AppSyncApi.GraphQLUrl
        EventBus: !Ref EventBus
        AppSyncLambdaLayer: !Ref AppSyncLambdaLayer

  BettingServiceStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: infrastructure/cfn/betting-service.yaml
      Parameters:
        AppSyncApiId: !GetAtt AppSyncApi.ApiId
        AppSyncApiUrl: !GetAtt AppSyncApi.GraphQLUrl
        EventBus: !Ref EventBus
        AppSyncLambdaLayer: !Ref AppSyncLambdaLayer

Outputs:
  Region:
    Description: Deployment region
    Value: !Ref AWS::Region
  CognitoUserPoolID:
    Description: The UserPool ID
    Value: !Ref UserPool
  CognitoWebClientID:
    Description: The web client ID
    Value: !Ref UserPoolClient
  WebUIBucket:
    Description: Web UI S3 Bucket
    Value: !Ref WebUIBucket
  WebUrl:
    Description: The web frontend URL
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
  AppSyncApiId:
    Value: !GetAtt AppSyncApi.ApiId
  AppSyncApiArn:
    Value: !GetAtt AppSyncApi.Arn
  AppSyncApiUrl:
    Value: !GetAtt AppSyncApi.GraphQLUrl
