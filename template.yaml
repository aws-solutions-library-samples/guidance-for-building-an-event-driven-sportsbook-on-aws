# amazonq-ignore-next-lineAWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Sportsbook Event Driven Example Application

Globals:

  Function:
    Runtime: python3.12
    Tracing: Active
    ReservedConcurrentExecutions: 50
    Layers:
      - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-x86_64:10
    # KmsKeyArn: !GetAtt LambdaEnvironmentKMSKey.Arn

Parameters:
  EventBusName:
    Type: String
    Default: SportsbookEvents
    Description: Optional name for the eventbus used in this application

  AccessLogsBucket:
    Type: String
    Default: ''
    Description: Optional bucket for access logs. Leave blank to disable access logging

  CognitoAdvancedSecurity:
    Description: The type of Cognito advanced security to enable. Disabled by default.
    Type: String
    Default: 'OFF'
    AllowedValues:
      - 'OFF'
      - AUDIT
      - ENFORCED

  GeoRestrictionType:
    Type: String
    Default: none
    AllowedValues:
      - none
      - whitelist
      - blacklist
    Description: Type of geo restriction to apply (none, whitelist, or blacklist)

  GeoRestrictionLocations:
    Type: CommaDelimitedList
    Default: ''
    Description: Comma-separated list of country codes (e.g., US,CA,GB)

  DomainName:
    Type: String
    Description: Domain name for the CloudFront distribution
    Default: '' # Default to empty to make it optional

  CertificateArn:
    Type: String
    Description: ARN of the ACM certificate for the CloudFront distribution
    Default: '' # Default to empty to make it optional

Conditions:
  WithAccessLogs: !Not
    - !Equals
      - !Ref AccessLogsBucket
      - ''
  HasGeoRestrictions: !Not
    - !Equals
      - !Ref GeoRestrictionType
      - none
  UseCustomDomain: !Not
    - !Equals
      - !Ref DomainName
      - ''

Resources:
  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Ref EventBusName

  LambdaEnvironmentKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for Lambda environment variable encryption
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: '*'
          - Sid: Allow Lambda to use the key
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:DescribeKey
            Resource: '*'
            Condition:
              StringEquals:
                kms:CallerAccount: !Ref AWS::AccountId

  # LambdaEnvironmentKMSKeyAlias:
  #   Type: AWS::KMS::Alias
  #   Properties:
  #     AliasName: !Sub alias/${AWS::StackName}-lambda-env-key
  #     TargetKeyId: !Ref LambdaEnvironmentKMSKey

  # amazonq-ignore-next-line
  WebUIBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration: !If
        - WithAccessLogs
        - DestinationBucketName: !Ref AccessLogsBucket
          LogFilePrefix: !Ref AWS::StackName
        - !Ref AWS::NoValue
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  WebUIBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebUIBucket
      PolicyDocument:
        Statement:
          - Sid: HttpsOnly
            Action: '*'
            Effect: Deny
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${WebUIBucket}
              - !Sub arn:${AWS::Partition}:s3:::${WebUIBucket}/*
            Principal: '*'
            Condition:
              Bool:
                aws:SecureTransport: 'false'
          - Sid: CloudFrontOriginOnly
            Action: s3:GetObject
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:s3:::${WebUIBucket}/*
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              ArnEquals:
                aws:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}

  # WAFWebACL:
  #   Type: AWS::WAFv2::WebACL
  #   Properties:
  #     Name: !Sub ${AWS::StackName}-WebACL
  #     Scope: CLOUDFRONT # Specify CLOUDFRONT for CloudFront distributions
  #     DefaultAction:
  #       Allow: {}
  #     VisibilityConfig:
  #       SampledRequestsEnabled: true
  #       CloudWatchMetricsEnabled: true
  #       MetricName: !Sub ${AWS::StackName}-WebACL
  #     Rules:
  #       # AWS Managed Rules for common threats
  #       - Name: AWSManagedRulesCommonRuleSet
  #         Priority: 0
  #         OverrideAction:
  #           None: {}
  #         VisibilityConfig:
  #           SampledRequestsEnabled: true
  #           CloudWatchMetricsEnabled: true
  #           MetricName: AWSManagedRulesCommonRuleSet
  #         Statement:
  #           ManagedRuleGroupStatement:
  #             VendorName: AWS
  #             Name: AWSManagedRulesCommonRuleSet

  #       # AWS Managed Rules for known bad inputs
  #       - Name: AWSManagedRulesKnownBadInputsRuleSet
  #         Priority: 1
  #         OverrideAction:
  #           None: {}
  #         VisibilityConfig:
  #           SampledRequestsEnabled: true
  #           CloudWatchMetricsEnabled: true
  #           MetricName: AWSManagedRulesKnownBadInputsRuleSet
  #         Statement:
  #           ManagedRuleGroupStatement:
  #             VendorName: AWS
  #             Name: AWSManagedRulesKnownBadInputsRuleSet

  #       # Rate limiting rule to prevent DDoS
  #       - Name: RateLimitRule
  #         Priority: 2
  #         Action:
  #           Block: {}
  #         VisibilityConfig:
  #           SampledRequestsEnabled: true
  #           CloudWatchMetricsEnabled: true
  #           MetricName: RateLimitRule
  #         Statement:
  #           RateBasedStatement:
  #             Limit: 2000 # Requests per 5-minute period
  #             AggregateKeyType: IP

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub ${AWS::StackName}-S3AccessControl
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # amazonq-ignore-next-line
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        # WebACLId: !GetAtt WAFWebACL.Arn
        Origins:
          - DomainName: !GetAtt WebUIBucket.RegionalDomainName
            Id: S3Origin
            OriginAccessControlId: !Ref CloudFrontOriginAccessControl
            S3OriginConfig: {}
        Enabled: true
        HttpVersion: http2
        Comment: The UI distribution
        Aliases: !If
          - UseCustomDomain
          - - !Ref DomainName
            - !Sub www.${DomainName}
          - !Ref AWS::NoValue
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_All
        ViewerCertificate: !If
          - UseCustomDomain
          - AcmCertificateArn: !Ref CertificateArn
            MinimumProtocolVersion: TLSv1.2_2021
            SslSupportMethod: sni-only # Use SNI to reduce costs
          - CloudFrontDefaultCertificate: true
            MinimumProtocolVersion: TLSv1.2_2021
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        Restrictions:
          GeoRestriction:
            RestrictionType: !Ref GeoRestrictionType
            Locations: !If
              - HasGeoRestrictions
              - !Ref GeoRestrictionLocations
              - !Ref AWS::NoValue
        Logging: !If
          - WithAccessLogs
          - Bucket: !Sub ${AccessLogsBucket}.s3.${AWS::URLSuffix}
            IncludeCookies: false
            Prefix: !Sub ${AWS::StackName}/
          - !Ref AWS::NoValue

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      EmailVerificationMessage: Your Sportsbook confirmation code is {####}
      EmailVerificationSubject: Your confirmation code for Sportsbook
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      UserPoolAddOns:
        AdvancedSecurityMode: !Ref CognitoAdvancedSecurity
      MfaConfiguration: OPTIONAL # Options: OFF, OPTIONAL, REQUIRED
      EnabledMfas:
        - SOFTWARE_TOKEN_MFA
      Schema:
        - Name: isLocked
          AttributeDataType: String
          Required: false
          Mutable: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

  PostConfirmationFunction:
    DependsOn: LambdaEnvironmentKMSKey
    Type: AWS::Serverless::Function
    Properties:
      Handler: postConfirmation.lambda_handler
      CodeUri: infrastructure/lambda/auth/
      Description: Event receiver for auth events
      Timeout: 10
      MemorySize: 256
      KmsKeyArn: !GetAtt LambdaEnvironmentKMSKey.Arn
      Events:
        CognitoPostConfirmation:
          Type: Cognito
          Properties:
            UserPool: !Ref UserPool
            Trigger: PostConfirmation
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBus
        - Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:DescribeKey
              Resource: !GetAtt LambdaEnvironmentKMSKey.Arn
      Environment:
        Variables:
          EVENT_BUS: !Ref EventBus

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlows:
        - implicit
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      CallbackURLs:
        - !Sub https://${CloudFrontDistribution.DomainName}
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH

  AppSyncLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: Layer containing appsync graphql utilities
      ContentUri: infrastructure/lambda/gql/
      CompatibleRuntimes:
        - python3.12
    Metadata:
      BuildMethod: python3.12

  AppSyncLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-AWSAppSyncPushToCloudWatchLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*

  AppSyncApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub ${AWS::StackName}-AppSync-api
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      AdditionalAuthenticationProviders:
        - AuthenticationType: AWS_IAM
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppSyncLoggingRole.Arn
        FieldLogLevel: ALL
      UserPoolConfig:
        UserPoolId: !Ref UserPool
        AwsRegion: !Sub ${AWS::Region}
        DefaultAction: ALLOW
      XrayEnabled: true

  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DefinitionS3Location: ./schema.graphql

  # Services
  WalletServiceStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: infrastructure/cfn/wallet-service.yaml
      Parameters:
        AppSyncApiId: !GetAtt AppSyncApi.ApiId
        AppSyncEndpointArn: !GetAtt AppSyncApi.GraphQLEndpointArn
        EventBus: !Ref EventBus
        LambdaEnvKmsKeyArn: !GetAtt LambdaEnvironmentKMSKey.Arn

  PamServiceStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: infrastructure/cfn/pam-service.yaml
      Parameters:
        AppSyncApiId: !GetAtt AppSyncApi.ApiId
        AppSyncApiUrl: !GetAtt AppSyncApi.GraphQLUrl
        EventBus: !Ref EventBus
        # amazonq-ignore-next-line
        AppSyncLambdaLayer: !Ref AppSyncLambdaLayer
        UserPool: !Ref UserPool
        LambdaEnvKmsKeyArn: !GetAtt LambdaEnvironmentKMSKey.Arn

  ThirdPartyServiceStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: infrastructure/cfn/thirdparty-service.yaml
      Parameters:
        AppSyncApiId: !GetAtt AppSyncApi.ApiId
        AppSyncApiUrl: !GetAtt AppSyncApi.GraphQLUrl
        EventBus: !Ref EventBus
        AppSyncLambdaLayer: !Ref AppSyncLambdaLayer
        LiveMarketDataStore: !GetAtt LiveMarketServiceStack.Outputs.LiveMarketDataStoreName
        LambdaEnvKmsKeyArn: !GetAtt LambdaEnvironmentKMSKey.Arn

  TradingServiceStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: infrastructure/cfn/trading-service.yaml
      Parameters:
        EventBus: !Ref EventBus
        LambdaEnvKmsKeyArn: !GetAtt LambdaEnvironmentKMSKey.Arn

  LiveMarketServiceStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: infrastructure/cfn/livemarket-service.yaml
      Parameters:
        AppSyncApiId: !GetAtt AppSyncApi.ApiId
        AppSyncApiUrl: !GetAtt AppSyncApi.GraphQLUrl
        EventBus: !Ref EventBus
        AppSyncLambdaLayer: !Ref AppSyncLambdaLayer
        LambdaEnvKmsKeyArn: !GetAtt LambdaEnvironmentKMSKey.Arn

  BettingServiceStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: infrastructure/cfn/betting-service.yaml
      Parameters:
        AppSyncApiId: !GetAtt AppSyncApi.ApiId
        AppSyncApiUrl: !GetAtt AppSyncApi.GraphQLUrl
        EventBus: !Ref EventBus
        AppSyncLambdaLayer: !Ref AppSyncLambdaLayer
        LambdaEnvKmsKeyArn: !GetAtt LambdaEnvironmentKMSKey.Arn

  SystemEventServiceStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: infrastructure/cfn/systemevents-service.yaml
      Parameters:
        AppSyncApiId: !GetAtt AppSyncApi.ApiId
        AppSyncApiUrl: !GetAtt AppSyncApi.GraphQLUrl
        EventBus: !Ref EventBus
        AppSyncLambdaLayer: !Ref AppSyncLambdaLayer
        LambdaEnvKmsKeyArn: !GetAtt LambdaEnvironmentKMSKey.Arn

  EventsServiceStack:
    Type: AWS::Serverless::Application
    DependsOn: LiveMarketServiceStack
    Properties:
      Location: infrastructure/cfn/sportingevents-service.yaml
      Parameters:
        EventBus: !Ref EventBus
        LambdaEnvKmsKeyArn: !GetAtt LambdaEnvironmentKMSKey.Arn

Outputs:
  Region:
    Description: Deployment region
    Value: !Ref AWS::Region
  CognitoUserPoolID:
    Description: The UserPool ID
    Value: !Ref UserPool
  CognitoWebClientID:
    Description: The web client ID
    Value: !Ref UserPoolClient
  WebUIBucket:
    Description: Web UI S3 Bucket
    Value: !Ref WebUIBucket
  WebUrl:
    Description: The web frontend URL
    Value: !Sub https://${CloudFrontDistribution.DomainName}
  AppSyncApiId:
    Value: !GetAtt AppSyncApi.ApiId
  AppSyncApiArn:
    Value: !GetAtt AppSyncApi.Arn
  AppSyncApiUrl:
    Value: !GetAtt AppSyncApi.GraphQLUrl