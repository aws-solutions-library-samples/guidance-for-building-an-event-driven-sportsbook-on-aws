AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Globals:

  Function:
    Runtime: python3.12
    Tracing: Active
    Layers:
      - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-x86_64:10
    Environment:
      Variables:
        POWERTOOLS_SERVICE_NAME: livemarket

Parameters:

  AppSyncApiId:
    Type: String

  AppSyncApiUrl:
    Type: String

  EventBus:
    Type: String

  AppSyncLambdaLayer:
    Type: String

  LambdaEnvKmsKeyArn:
    Type: String
    Default: ""
    Description: ARN of the KMS key for Lambda environment variable encryption

  EnableEnvVarEncryption:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: Enable enhanced encryption for Lambda environment variables

Conditions:
  EnableEnvEncryption: !Equals [!Ref EnableEnvVarEncryption, "true"]
  HasKmsKeyArn: !Not [!Equals [!Ref LambdaEnvKmsKeyArn, ""]]
  UseKmsKey: !Or [!Condition EnableEnvEncryption, !Condition HasKmsKeyArn]

Resources:

  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 60
      SqsManagedSspEnabled: true
      RedrivePolicy:
        maxReceiveCount: 2
        deadLetterTargetArn: !GetAtt DLQ.Arn

  DLQ:
    Type: AWS::SQS::Queue
    Properties:
      SqsManagedSspEnabled: true

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Listener for all system events"
      EventBusName: !Ref EventBus
      EventPattern:
        source:
          - "com.trading"
          - "com.wallet"
          - "com.betting"
          - "com.thirdparty"
          - "com.livemarket"
          - "com.pam"
          - "com.betting.settlement"
      Targets:
        - Arn: !GetAtt SQSQueue.Arn
          Id: SQSqueue

  EventBridgeToToSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: sqs:SendMessage
          Resource:  !GetAtt SQSQueue.Arn
          Condition:
            StringEqualsIfExists:
              aws:SourceAccount: !Ref AWS::AccountId
            Bool:
              aws:SecureTransport: "true"
      Queues:
        - Ref: SQSQueue

  SystemEventReceiverFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      CodeUri: ../lambda/systemevents/receiver/
      Description: Lambda for receiving events for this service
      Timeout: 10
      MemorySize: 256
      KmsKeyArn: !If [UseKmsKey, !Ref LambdaEnvKmsKeyArn, !Ref AWS::NoValue]
      Layers:
        - !Ref AppSyncLambdaLayer
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SQSQueue.Arn
            BatchSize: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures
      DeadLetterQueue:
        Type: SQS  # Can be SQS or SNS
        TargetArn: !GetAtt DLQ.Arn
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBus
        - Statement:
            - Effect: Allow
              Action:
                - appsync:GraphQL
              Resource:
                - !Sub arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${AppSyncApiId}/types/Mutation/fields/addSystemEvent
        - Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:DescribeKey
              Resource: !If [UseKmsKey, !Ref LambdaEnvKmsKeyArn, !Ref AWS::NoValue]
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          APPSYNC_URL: !Ref AppSyncApiUrl
          EVENT_BUS: !Ref EventBus

  SystemEventResolverFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Echo event to resolve mutation
      Handler: app.lambda_handler
      CodeUri: ../lambda/systemevents/resolver/
      Timeout: 10
      KmsKeyArn: !If [UseKmsKey, !Ref LambdaEnvKmsKeyArn, !Ref AWS::NoValue]
      Layers:
        - !Ref AppSyncLambdaLayer
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:DescribeKey
              Resource: !If [UseKmsKey, !Ref LambdaEnvKmsKeyArn, !Ref AWS::NoValue]

  SystemEventAppSyncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-AppSyncRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt SystemEventResolverFunction.Arn

  SystemEventLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref AppSyncApiId
      Name: SystemEvent_Lambda_Source
      Description: System Event Lambda AppSync Data Source
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt SystemEventAppSyncRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt SystemEventResolverFunction.Arn

  AddSystemEventResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref AppSyncApiId
      TypeName: Mutation
      FieldName: addSystemEvent
      DataSourceName: !GetAtt SystemEventLambdaDataSource.Name